package izumi.distage.plugins

import scala.annotation.implicitNotFound
import scala.quoted.{Expr, Quotes, Type}

/**
  * This macro allows `distage`'s compile-time checks to cooperate with Scala's incremental compilation:
  * it forces recompilation of the macro that performs compile-time plan checking every time a PluginDef's body changes.
  *
  * It does that by generating a new unique type for each compiler session and assigning it to the class that inherits PluginDef.
  * The "change of super type" of a plugin forces recompilation of all code that references it, and specifically of the
  * code generated by [[izumi.distage.framework.PlanCheckMacro]].
  *
  * This allows compile-time checking macro to re-run on relevant changes and provide rapid feedback during development.
  *
  * @see [[https://izumi.7mind.io/distage/distage-framework.html#compile-time-checks Compile-time checks]]
  */
@implicitNotFound("""Could not find implicit for `izumi.distage.plugins.ForcedRecompilationToken[${T}]`.
This is supposed to be impossible, but is sometimes observed under mdoc & scaladoc,
in which case you'll have to put a dummy implicit in scope, such as by using:

  import izumi.distage.plugins.ForcedRecompilationToken.disabled._""")
final abstract class ForcedRecompilationToken[T]

object ForcedRecompilationToken {

  transparent inline implicit def materialize[T]: ForcedRecompilationToken[T] = ${ UniqueRecompilationTokenMacro.materializeImpl }

  object disabled {
    implicit def disable: ForcedRecompilationToken[Unit] = null
  }

  object UniqueRecompilationTokenMacro {
    final val compilerLaunchId = java.util.UUID.randomUUID().toString

    // TODO: research if caching typed trees optimization is possible and meaningful in Dotty
    def materializeImpl[T](using quotes: Quotes): Expr[ForcedRecompilationToken[T]] = {
      import quotes.reflect.*
      val typeTree = ConstantType(StringConstant("abc"))
      typeTree.asType.asInstanceOf[Type[T]] match {
        case given Type[uuid] =>
          '{ null.asInstanceOf[ForcedRecompilationToken[uuid]] }
      }
    }
  }

}
