domain izumi.test.domain01

include "model01.model"
include "model02.model"

id TestValIdentifier {
  userId: str
}

id TestIdentifer {
  userId: str
  context: str
}

mixin TestInterface {
  userId: UserId
  accountBalance: i32
  latestLogin: i64
  keys: map[str, str]
  nicknames: list[str]
}

data TestObject {
  + TestInterface
}

mixin AllTypes {
  boolean : bool
  string  : str
  int8    : i08
  int16   : i16
  int32   : i32
  int64   : i64
  float   : flt
  double  : dbl
  uuid    : uid
  ts      : tsz
  tslocal : tsl
  time    : time
  date    : date

  list    : list[AllTypes]
  map     : map[str, AllTypes]
  option  : opt[AllTypes]
  set     : set[AllTypes]
}

adt AnAdt {
  AllTypes
  TestObject
}

data AllTypesObject {
  + AllTypes
}

mixin AnyValTest {
  boolean: bool
}

service UserService {
  def createUser(TestInterface): (TestInterface)
  def anyvalTest(AnyValTest): (AnyValTest)
}


mixin PrivateMixinParent {
  parent: str
}

mixin PrivateMixinPrivateParent {
  parent_embedded: str
}

mixin PrivateMixin {
  + PrivateMixinParent
  * PrivateMixinPrivateParent

  embedded: bool
}

mixin ExtendedMixin {
  * PrivateMixin
  own: i08
}

data PrivateTestObject {
  + ExtendedMixin
}

data AnotherTestObject {
  * ExtendedMixin
}


enum RTestEnum {
  A
}

mixin RTestMixin {
  a: RTestEnum
}

mixin RtestMixin2 {
  b:  RTestMixin
}

data RTestObject1 {
 + RtestMixin2
}

data RTestObject2 {
 + RtestMixin2
}

service TestService {
    def createUser(RtestMixin2, RTestMixin): (RtestMixin2)
}

mixin AnyValTest2 {
 field: AnyValTest
}
