domain idltest.services

enum TestServiceEnum {
    Value1
    Value2
}

mixin SuccessData {
  greeting: str
}

mixin ErrorData {
  message: str
}

mixin Request {
  firstName: str
  secondName: str
}

enum Environment {
    Dev
    Prod
}

data Package {
    name: str
}

service TestService {
  def parameterless(): str
  def simpleMethod(a: str): str
  def simpleIntMethod(a: i32): i32
  def simpleMethodWithGenerics(a: list[str]): list[str]
  def simple(+Request): (+Request)
  def simpleEnum(v: TestServiceEnum): str
  def simpleEnum2(e: Environment): str
  def returnsList(e: Environment): list[Package]
  def returnsMap(e: Environment): map[str,Package]

  def simpleGoReserved(package: Package): bool

  // simple instance
  def greetSingularOut(firstName: str, secondName: str) => str

  // implicitly created structure
  def greetImplicitStructOut(firstName: str, secondName: str) => (a: str)

  // implicitly created structure
  def greetImplicitStructMultilineSyntax
    (
      region: str
      , age: int8
    )
      =>
    (
        + SuccessData
        , bullshit: str
    )

  // implicitly created structure
  def greetImplicitStructureMultilineCurlyBracesSyntax
    {
      region: str
      , age: int8
    } => {
        + SuccessData
        , bullshit: str
    }

  // ADT
  def greetAlgebraicOut(firstName: str, secondName: str) => ( SuccessData | ErrorData )

  // ADT
  def greetAlgebraicMultilineSyntax(firstName: str, secondName: str) => (
     SuccessData
   | ErrorData
  )

  // ADT
  def greetAlgebraicMultilineCurlyBracesSyntax
   {
     firstName: str
     secondName: str
   } => {
     SuccessData
     ErrorData
   }

}
