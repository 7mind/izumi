domain idltest.tempates


template [A, B] mixin M0 {
  _: A
  _: B
  mapping: map[A, B]
}



type M1 = M0[str, i08]
type M2 = M0[i08, M0[str, str]] // an implicit instance of M0[str, str] with crappy name will appear in typespace
type M3 = M0[i08, M0[str, map[str, str]]] // an implicit instance of M0[str, map[str, str]] with crappy name will appear in typespace
type M4 = M0[i08, M0[str, map[str, str]] %StrangeStructure ] // an implicit instance of M0[str, map[str, str]] will have name `StrangeStructure`


mixin M5 {
  f: M0[i08, tsz]
  f1: M0[i08, tsz]
}

mixin M6 {
  f10: M0[i08, str] %StrangeStructure2
  f11: M0[i08, str] %StrangeStructure2
  f12: M0[i08, str]

  f21: M0[i08, i08] %StrangeStructure3
}


template [A, B] mixin TInh1 {
    //+ M0[B, A]
    f1: A
    f2: B
}

mixin TInh2 {
  & TInh1[str, map[str, str]]
}

type TInh3 = TInh1[str, map[str, str]]

