name: Build

on:
  workflow_dispatch:
    inputs: {}
  push:
    branches: [ "develop" ]
    tags: [ "v**" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  checksecret:
    runs-on: ubuntu-latest
    outputs:
      HAVE_SECRETS: ${{ steps.checksecret_job.outputs.HAVE_SECRETS }}
    steps:
      - id: checksecret_job
        env:
          TOKEN_BITWARDEN_SM: ${{ secrets.TOKEN_BITWARDEN_SM }}
        run: |
          echo "HAVE_SECRETS=${{ env.TOKEN_BITWARDEN_SM != '' }}" >> $GITHUB_OUTPUT
  build-jvm:
    runs-on: ubuntu-latest
    needs: [ 'checksecret' ]
    strategy:
      matrix:
        java: [ '11', '17' ]
        scala: [ '2.12', '2.13', '3' ]
    steps:
      - uses: 7mind/github-env@main
        with:
          java-version: ${{ matrix.java }}
      - name: Build and Test with Coverage
        if: matrix.scala  != '3'
        run: |
          bash sbtgen.sc
          bash .build.sh ${{ matrix.scala }} coverage
      - name: Build and Test without Coverage # coverage leads to verification errors on scala3
        if: matrix.scala  == '3'
        run: |
          bash sbtgen.sc
          bash .build.sh ${{ matrix.scala }} test
      - uses: dorny/test-reporter@v1
        if: (needs.checksecret.outputs.HAVE_SECRETS == 'true') && (success() || failure())
#        continue-on-error: ${{ matrix.scala == '3' }}
        with:
          name: Test reports (JDK ${{ matrix.java }}, Scala ${{ matrix.scala }}, JVM)
          path: '**/target/test-reports/TEST-*.xml'
          reporter: java-junit
#          fail-on-error: ${{ matrix.scala != '3' }}
      - uses: bitwarden/sm-action@v1.0.0
        with:
          access_token: ${{ secrets.TOKEN_BITWARDEN_SM }}
          secrets: |
            5e21669e-48b4-49ce-82f0-b193010a2ded > TOKEN_CODECOV
      - uses: codecov/codecov-action@v3
        if: needs.checksecret.outputs.HAVE_SECRETS == 'true'
        with:
          token: ${{ env.TOKEN_CODECOV }} # not required for public repos but works unreliable without it
          verbose: true # optional (default = false)
#          fail_ci_if_error: ${{ matrix.scala != '3' }}
          files: cobertura.xml
          # TODO: do we need scoverage.xml? If so files: may be just omitted
          # files: cobertura.xml,scoverage.xml
          # flags: unittests
      - name: Upload dependency graph
        uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91
        if: github.ref == 'develop'
  build-js:
    runs-on: ubuntu-latest
    needs: [ 'checksecret' ]
    strategy:
      matrix:
        java: [ '11', '17' ]
        scala: [ '2.12', '2.13', '3' ]
    steps:
      - uses: 7mind/github-env@main
        with:
          java-version: ${{ matrix.java }}
      - name: Build and Test with Coverage
        if: matrix.scala  != '3'
        run: |
          bash sbtgen.sc --nojvm --js
          bash .build.sh ${{ matrix.scala }} coverage
      - name: Build and Test without Coverage # coverage leads to verification errors on scala3
        if: matrix.scala  == '3'
        run: |
          bash sbtgen.sc --nojvm --js
          bash .build.sh ${{ matrix.scala }} test
      - uses: dorny/test-reporter@v1
        if: (needs.checksecret.outputs.HAVE_SECRETS == 'true') && (success() || failure())
#        continue-on-error: ${{ matrix.scala == '3' }}
        with:
          name: Test reports (JDK ${{ matrix.java }}, Scala ${{ matrix.scala }}, JS)
          path: '**/target/test-reports/TEST-*.xml'
          reporter: java-junit
#          fail-on-error: ${{ matrix.scala != '3' }}
  test-site:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
        scala: [ '2.13']
    steps:
      - uses: 7mind/github-env@main
        with:
          java-version: ${{ matrix.java }}
      - name: Build Microsite
        run: |
          bash sbtgen.sc --js 
          bash .build.sh ${{ matrix.scala }} site-test
  publish-site:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
        scala: [ '2.13']
    needs: [ 'build-jvm', 'build-js', 'test-site', 'checksecret' ]
    if: needs.checksecret.outputs.HAVE_SECRETS == 'true'
    steps:
      - uses: 7mind/github-env@main
        with:
          java-version: ${{ matrix.java }}
      - uses: bitwarden/sm-action@v1.0.0
        with:
          access_token: ${{ secrets.TOKEN_BITWARDEN_SM }}
          secrets: |
            4aeac969-5880-4e36-97a8-b193010ca904 > IZUMI_MICROSITE_KEY
      - uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.IZUMI_MICROSITE_KEY }}
          known_hosts: 'unnecessary' # github.com is already there
      - name: Publish Microsite
        run: |
          bash sbtgen.sc --js 
          bash .build.sh ${{ matrix.scala }} site-publish
  publish-artifacts:
    runs-on: ubuntu-latest
    needs: [ 'build-jvm', 'build-js', 'checksecret' ]
    if: needs.checksecret.outputs.HAVE_SECRETS == 'true'
    strategy:
      matrix:
        java: [ '11' ]
        scala: [ '2.12', '2.13', '3']
    steps:
      - uses: 7mind/github-env@main
        with:
          java-version: ${{ matrix.java }}
      - uses: bitwarden/sm-action@v1.0.0
        with:
          access_token: ${{ secrets.TOKEN_BITWARDEN_SM }}
          secrets: |
            994f97a2-97a4-4fe1-806a-b1930104435f > SONATYPE_CREDENTIALS_FILE
            749f4227-9f11-4ceb-9121-b1930110c3a9 > OPENSSL_KEY
            a2fe5b5b-5f3f-47f8-961c-b1930110cea7 > OPENSSL_IV
      - name: Build and Publish to Sonatype
#        continue-on-error: ${{ matrix.scala == '3' }}
        run: |
          bash sbtgen.sc --js
          bash .build.sh ${{ matrix.scala }} secrets publishScala
  all-good:
    if: always()
    runs-on: ubuntu-latest
    needs: [ 'build-jvm', 'build-js', 'test-site' ]
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
